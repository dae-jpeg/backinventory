# Generated by Django 5.2.1 on 2025-06-21 14:10

from django.db import migrations, models


def update_user_levels(apps, schema_editor):
    """Update existing user levels to new names"""
    CustomUser = apps.get_model('api', 'CustomUser')
    
    # Update existing user levels
    CustomUser.objects.filter(user_level='SUPER_ADMIN').update(user_level='BOSS_DEVELOPER')
    CustomUser.objects.filter(user_level='ADMIN').update(user_level='SUPERVISOR')
    CustomUser.objects.filter(user_level='STAFF').update(user_level='BRANCH_MANAGER')
    # USER level remains the same


def reverse_user_levels(apps, schema_editor):
    """Reverse the user level updates"""
    CustomUser = apps.get_model('api', 'CustomUser')
    
    # Reverse the updates
    CustomUser.objects.filter(user_level='BOSS_DEVELOPER').update(user_level='SUPER_ADMIN')
    CustomUser.objects.filter(user_level='SUPERVISOR').update(user_level='ADMIN')
    CustomUser.objects.filter(user_level='BRANCH_MANAGER').update(user_level='STAFF')


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0009_alter_item_status'),
    ]

    operations = [
        # Data migration to update existing user levels
        migrations.RunPython(update_user_levels, reverse_user_levels),
        
        # Schema migration to update the choices
        migrations.AlterField(
            model_name='customuser',
            name='user_level',
            field=models.CharField(choices=[('BOSS_DEVELOPER', 'Boss/Developer'), ('SUPERVISOR', 'Supervisor'), ('BRANCH_MANAGER', 'Branch Manager'), ('USER', 'User')], default='USER', max_length=15),
        ),
    ]
