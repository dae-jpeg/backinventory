# Generated by Django 5.2.1 on 2025-06-21 07:20

from django.db import migrations, models
import django.db.models.deletion
import uuid
from django.conf import settings

def migrate_regions_to_companies_and_branches(apps, schema_editor):
    """
    Data migration to create a Company for each existing Region,
    and associate the new Branch with it.
    """
    Company = apps.get_model('api', 'Company')
    Branch = apps.get_model('api', 'Branch')
    CustomUser = apps.get_model('api', 'CustomUser')
    db_alias = schema_editor.connection.alias

    # Find a superuser to be the owner of the new companies
    # This is a sensible default for the migration.
    owner = CustomUser.objects.using(db_alias).filter(user_level='BOSS_DEVELOPER').order_by('date_joined').first()
    if not owner:
        # If no boss is found, use the very first user created as a fallback.
        owner = CustomUser.objects.using(db_alias).order_by('date_joined').first()

    if not owner:
        # If there are no users at all, we can't set an owner.
        # The company's 'owner' field must be nullable or have a default for this to work.
        # Based on the new model, it's a PROTECT ForeignKey, so an owner is required.
        # This case should be rare in a populated system.
        print("Warning: No users found to assign as company owner. Migration might fail if 'owner' is required.")
        return

    for branch in Branch.objects.using(db_alias).all():
        # Create a new company for each old region, using region's name.
        company_name = branch.name 
        company, created = Company.objects.using(db_alias).get_or_create(
            name=f"{company_name} Company",
            defaults={'owner': owner}
        )
        
        # Link the branch to the new company
        branch.company = company
        branch.save()

class Migration(migrations.Migration):

    dependencies = [
        ('api', '0010_update_user_levels'),
    ]

    operations = [
        # 1. Create the new Company model table
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='owned_companies', to=settings.AUTH_USER_MODEL, help_text="The Boss/Developer who owns this company profile.")),
                ('supervisor', models.OneToOneField(blank=True, help_text="The assigned supervisor for this company.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervised_company', to=settings.AUTH_USER_MODEL)),
            ],
            options={'verbose_name': 'Company', 'verbose_name_plural': 'Companies', 'ordering': ['name']},
        ),
        
        # 2. Rename the 'Region' model to 'Branch'
        migrations.RenameModel(old_name='Region', new_name='Branch'),
        
        # 3. Add the 'company' foreign key to the new 'Branch' model
        migrations.AddField(
            model_name='branch',
            name='company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='api.company'),
        ),
        
        # 4. Run the data migration to populate companies and link branches
        migrations.RunPython(migrate_regions_to_companies_and_branches, reverse_code=migrations.RunPython.noop),

        # 5. Make the 'company' field non-nullable after populating it
        migrations.AlterField(
            model_name='branch',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='api.company'),
        ),

        # 6. Add the 'manager' field to the Branch model
        migrations.AddField(
            model_name='branch',
            name='manager',
            field=models.OneToOneField(blank=True, help_text="The assigned manager for this branch.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_branch', to=settings.AUTH_USER_MODEL),
        ),

        # 7. Alter Foreign Keys on other models to point to Branch instead of Region
        migrations.RenameField(model_name='customuser', old_name='region', new_name='branch'),
        migrations.RenameField(model_name='item', old_name='region', new_name='branch'),
        migrations.RenameField(model_name='transaction', old_name='region', new_name='branch'),

        # 8. Update unique_together constraints
        migrations.AlterUniqueTogether(
            name='branch',
            unique_together={('company', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='customuser',
            unique_together={('branch', 'id_number')},
        ),
        migrations.AlterUniqueTogether(
            name='item',
            unique_together={('branch', 'item_id'), ('branch', 'barcode_number')},
        ),

        # 9. Clean up obsolete fields from the old Region model that are not in Branch
        migrations.RemoveField(model_name='branch', name='code'),
        migrations.RemoveField(model_name='branch', name='slug'),
        migrations.RemoveField(model_name='branch', name='max_users'),
        migrations.RemoveField(model_name='branch', name='max_items'),
        migrations.RemoveField(model_name='branch', name='primary_color'),
        migrations.RemoveField(model_name='branch', name='secondary_color'),
        migrations.RemoveField(model_name='branch', name='logo'),
    ]
